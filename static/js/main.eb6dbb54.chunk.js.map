{"version":3,"sources":["Header.js","App.js","App2.js","index.js"],"names":["Header","props","console","log","children","App","useState","post","setPost","postId","setPostId","isFetching","setIsFetching","useEffect","fetchPost","fetch","res","json","nama","onClick","e","title","body","App2","className","style","color","textAlign","element2","rootElement","Fragment","document","getElementById","createRoot","render"],"mappings":"sMAgBeA,MAbf,SAAgBC,GAEd,OADAC,QAAQC,IAAIF,GAEV,iCACE,6BAAKA,EAAMG,YAGjB,ECiDeC,MAvDf,SAAaJ,GACXC,QAAQC,IAAIF,GACZ,MAA0BK,mBAAS,GAAE,mBACrC,GADY,KAAU,KACEA,mBAAS,CAAC,IAAE,mBAA7BC,EAAI,KAAEC,EAAO,KACpB,EAA4BF,mBAAS,GAAE,mBAAhCG,EAAM,KAAEC,EAAS,KACxB,EAAoCJ,oBAAS,GAAM,mBAA5CK,EAAU,KAAEC,EAAa,KAmBhC,OAlBAC,qBAAU,WACR,IAAMC,EAAS,iDAAG,gGACI,OAApBF,GAAc,GAAM,SACFG,MAAM,8CAAD,OACyBN,IAC9C,KAAD,EAFQ,OAAHO,EAAG,gBAGUA,EAAIC,OAAO,KAAD,EAAvBV,EAAI,OACVL,QAAQC,IAAII,GACZC,EAAQD,GACRK,GAAc,GAAO,4CACtB,kBATc,mCAUfE,GACF,GAAG,CAACL,IAOF,qCACE,cAAC,EAAM,UAAER,EAAMiB,OACf,6BAAKjB,EAAMiB,OACX,2CAAcT,KACd,wBAAQU,QAAS,SAACC,GAAC,OAAKV,EAAUD,EAAS,EAAE,EAAC,wBAC9C,sBACA,sBASCE,GAAc,4CACbA,GACA,qCACE,4BAAIJ,EAAKc,QACT,4BAAId,EAAKe,YAKnB,E,MCnDe,SAASC,IAQtB,OACE,sBAAKC,UARW,MAQU,UACxB,oBAAIC,MAAO,CAAEC,MAAO,MAAOC,UAAW,QAAS,SARhC,sBASf,6BARgB,kBAShB,wBAAQR,QAPQ,SAACC,GACnBlB,QAAQC,IAAI,mBACd,EAKiC,qBAGnC,CCVA,IAGMyB,EAAW,cAAC,EAAG,CAACV,KAAK,eAWrBW,GAPH,IAAMC,SAOWC,SAASC,eAAe,SAC/BC,qBAAWJ,GAEnBK,OACH,eAAC,aAAU,WACT,cAACX,EAAI,IACJK,K","file":"static/js/main.eb6dbb54.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Header(props) {\r\n  console.log(props);\r\n  return (\r\n    <header>\r\n      <h1>{props.children}</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  children: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Header from \"./Header\";\r\n\r\nfunction App(props) {\r\n  console.log(props);\r\n  const [count, setCount] = useState(0);\r\n  const [post, setPost] = useState({});\r\n  const [postId, setPostId] = useState(1);\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  useEffect(() => {\r\n    const fetchPost = async () => {\r\n      setIsFetching(true);\r\n      const res = await fetch(\r\n        `https://jsonplaceholder.typicode.com/posts/${postId}`\r\n      );\r\n      const post = await res.json();\r\n      console.log(post);\r\n      setPost(post);\r\n      setIsFetching(false);\r\n    };\r\n    fetchPost();\r\n  }, [postId]); //untuk mengatasi data di ambil sekali saja pada saat render\r\n\r\n  // if (isFetching){\r\n  //   return <h1>Loading...</h1>\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <Header>{props.nama}</Header>\r\n      <h1>{props.nama}</h1>\r\n      <h3>Counter: {postId}</h3>\r\n      <button onClick={(e) => setPostId(postId + 1)}>Berhitung!</button>\r\n      <p></p>\r\n      <p></p>\r\n      {/* {isFetching ? (\r\n        <h1>Loading...</h1>\r\n      ) : (\r\n        <>\r\n          <b>{post.title}</b>\r\n          <p>{post.body}</p>\r\n        </>\r\n      )} */}\r\n      {isFetching && <h1>Loading..</h1>}\r\n      {!isFetching && (\r\n        <>\r\n          <b>{post.title}</b>\r\n          <p>{post.body}</p>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nApp.propTypes = {\r\n  nama: PropTypes.string.isRequired\r\n};\r\n\r\nexport default App;\r\n\r\n//usestate memiliki nilai balikan berupa array\r\n//memasukan nilai balikan dr useState tsb ke dlm variable\r\n","import \"./styles.css\";\n\nexport default function App2() {\n  const className = \"App\";\n  const helloTitle = \"Hello codesandbox\";\n  const description = \"testtt haloo!\";\n\n  const handleClick = (e) => {\n    console.log(\"Button Clicked !\");\n  };\n  return (\n    <div className={className}>\n      <h1 style={{ color: \"red\", textAlign: \"left\" }}>{helloTitle}</h1>\n      <h2>{description}</h2>\n      <button onClick={handleClick}>click</button>\n    </div>\n  );\n}\n\n// attribute harus camelCase\n// pemanggilan variable menggunakan {namavariable/fungsi}\n// inline css harus object {{color: 'red', textAlign: 'left'}}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport React from \"react\";\nimport App from \"./App\";\nimport App2 from \"./App2\";\n\n//tag name\nconst element = <h1>Hello World</h1>;\n\n//component\nconst element2 = <App nama=\"React apps\" />;\n\n//react fragment\nconst element3 = (\n  <React.Fragment>\n    <h1>Hello World!</h1>\n    <h2>Dunia!</h2>\n    <p>React is amazing</p>\n  </React.Fragment>\n);\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App2 />\n    {element2}\n  </StrictMode>\n);\n\n//<React.Fragment> bisa di singkat jadi <>\n//input data dari sebuah parameter disebut props\n//dan memiliki return value berupa react element\n//sebuah komponen dapat menerima inputan data melalui props\n//props: data diberikan dari luar component\n//misal dari komponen lain (component induk)\n//yang memanggil component tsb\n\n//state: data yang berada dalam komponen\n//dan dikelola oleh komponent itu sendiri\n//gunakan useState hook utk membuat state\n"],"sourceRoot":""}